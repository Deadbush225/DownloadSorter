name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Read version
        id: ver
        run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Install Qt6
        run: |
          sudo apt update
          sudo apt install -y qt6-base-dev qt6-tools-dev cmake build-essential
          sudo apt install -y libgl1-mesa-dev libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev libxcb1-dev libxcb-util-dev libxcb-xkb-dev

      - name: Install UPX
        run: |
          sudo apt install -y upx-ucl

      - name: Build application
        run: |
          cd src
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build
          cmake --build build --target install_local

      - name: Install packaging tools
        run: |
          sudo apt install -y rpm dpkg-dev

      - name: Create packages
        run: |
          FORCE_RPM_TARBALL=1 bash ./scripts/deploy.sh linux

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz

  build-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Read version
        id: ver
        shell: bash
        run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Install Qt6 (MinGW)
        uses: jurplel/install-qt-action@v3
        with:
          version: "6.7.3"
          host: "windows"
          target: "desktop"
          arch: "win64_mingw"
          tools: "tools_mingw1310"

      - name: Add Qt MinGW to PATH
        shell: pwsh
        run: |
          $qtDir = "${{ env.Qt6_DIR }}"
          $toolsRoot = Resolve-Path (Join-Path (Split-Path (Split-Path $qtDir)) Tools)
          $mingwDirs = Get-ChildItem -Path $toolsRoot -Directory -Filter "mingw*_64" | Sort-Object Name -Descending
          $preferred = $mingwDirs | Where-Object { $_.Name -match 'mingw(1310|1120|1100|100|90)_64' } | Select-Object -First 1
          if (-not $preferred) { $preferred = $mingwDirs | Select-Object -First 1 }
          if ($preferred) {
            Write-Host "Using MinGW: $($preferred.FullName)"
            "$($preferred.FullName)\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } else {
            Write-Host "No Qt MinGW tools found under $toolsRoot"
          }

      - name: Build application (GCC/MinGW)
        run: |
          cd src
          cmake -B build -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="${{ env.Qt6_DIR }}"
          cmake --build build -j 4
          cmake --build build --target install_local -j 2

      - name: Install Inno Setup
        run: |
          choco install innosetup

      - name: Create Windows installer
        run: |
          pwsh -ExecutionPolicy Bypass -File "./scripts/update_installer.ps1"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: windows-installer/*.exe
          if-no-files-found: error

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Read version
        id: ver
        run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Download Sorter v${{ steps.ver.outputs.version }}
          tag_name: ${{ github.ref_name }}
          files: |
            linux-packages/*
            windows-installer/*
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
