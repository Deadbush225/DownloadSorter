name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Read version
        id: ver
        run: echo "version=$(jq -r .version manifest.json)" >> $GITHUB_OUTPUT

      - name: Install Qt6
        run: |
          sudo apt update
          sudo apt install -y qt6-base-dev qt6-tools-dev cmake build-essential
          sudo apt install -y libgl1-mesa-dev libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev libxcb1-dev libxcb-util-dev libxcb-xkb-dev

      - name: Install UPX
        run: |
          sudo apt install -y upx-ucl

      - name: Build application
        run: |
          cd src
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build
          cmake --build build --target install_local

      - name: Install packaging tools
        run: |
          sudo apt install -y rpm dpkg-dev

      - name: Create packages
        run: |
          FORCE_RPM_TARBALL=1 bash ./scripts/deploy.sh linux

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz

  build-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Qt6 (MSVC)
        uses: jurplel/install-qt-action@v3
        with:
          version: "6.7.3"
          host: "windows"
          target: "desktop"
          arch: "win64_msvc2019_64"

      - name: Set up MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Build application (MSVC)
        run: |
          cd src
          cmake -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_PREFIX_PATH="${{ env.Qt6_DIR }}"
          cmake --build build --config Release -j 4
          cmake --build build --target install_local --config Release -j 2

      - name: Install Inno Setup
        run: |
          choco install innosetup

      - name: Create Windows installer
        run: |
          pwsh -ExecutionPolicy Bypass -File "./scripts/update_installer.ps1"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: windows-installer/*.exe
          if-no-files-found: error

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Read version
        id: ver
        run: echo "version=$(jq -r .version manifest.json)" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Download Sorter v${{ steps.ver.outputs.version }}
          tag_name: ${{ github.ref_name }}
          files: |
            linux-packages/*
            windows-installer/*
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
