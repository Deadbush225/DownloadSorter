name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Read version
        id: ver
        run: echo "version=$(jq -r .version manifest.json)" >> $GITHUB_OUTPUT

      - name: Install Qt6
        run: |
          sudo apt update
          sudo apt install -y qt6-base-dev qt6-tools-dev cmake build-essential
          sudo apt install -y libgl1-mesa-dev libxkbcommon-dev libxkbcommon-x11-dev libx11-xcb-dev libxcb1-dev libxcb-util-dev libxcb-xkb-dev

      - name: Install UPX
        run: |
          sudo apt install -y upx-ucl

      - name: Build application
        run: |
          cd src
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build
          cmake --build build --target install_local

      - name: Install packaging tools
        run: |
          sudo apt install -y rpm dpkg-dev

      - name: Create packages
        run: |
          FORCE_RPM_TARBALL=1 bash ./scripts/deploy.sh linux

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz

  build-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Qt6 (MSVC)
        uses: jurplel/install-qt-action@v3
        with:
          version: "6.7.3"
          host: "windows"
          target: "desktop"
          arch: "win64_msvc2019_64"

      - name: Set up MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Build application (MSVC)
        run: |
          cd src
          cmake -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_PREFIX_PATH="${{ env.Qt6_DIR }}"
          cmake --build build --config Release -j 4
          cmake --build build --target install_local --config Release -j 2

      - name: Install Inno Setup
        run: |
          choco install innosetup

      - name: Create Windows installer
        run: |
          pwsh -ExecutionPolicy Bypass -File "./scripts/update_installer.ps1"

      - name: Analyze deployment size
        shell: pwsh
        run: |
          Write-Host "=== Install directory contents ==="
          Get-ChildItem -Recurse "./install" | ForEach-Object {
            if (-not $_.PSIsContainer) {
              $size = [math]::Round($_.Length / 1MB, 2)
              $relativePath = $_.FullName.Replace((Resolve-Path "./install").Path, "").TrimStart('\')
              Write-Host "$relativePath : ${size}MB"
            }
          }
          $totalSize = (Get-ChildItem -Recurse "./install" | Measure-Object -Property Length -Sum).Sum
          Write-Host "Total size: $([math]::Round($totalSize / 1MB, 2))MB"

      - name: Manual DLL cleanup
        shell: pwsh
        run: |
          Write-Host "=== Manual DLL cleanup ==="
          $unwantedDlls = @(
            "Qt6Concurrent.dll", "Qt6PrintSupport.dll", "Qt6Multimedia.dll", 
            "Qt6MultimediaWidgets.dll", "Qt6Quick.dll", "Qt6Qml.dll",
            "Qt6QmlModels.dll", "Qt6QmlWorkerScript.dll", "Qt6QuickControls2.dll",
            "Qt6Test.dll", "Qt6Sql.dll", "Qt6Xml.dll", "Qt6SerialPort.dll",
            "Qt6WebEngine*.dll", "Qt6Positioning.dll", "Qt6Sensors.dll",
            "opengl32sw.dll", "Qt6OpenGL.dll", "Qt6OpenGLWidgets.dll",
            "concrt140.dll", "msvcp140.dll", "msvcp140_1.dll", "msvcp140_2.dll",
            "vcruntime140.dll", "vcruntime140_1.dll", "api-ms-*.dll",
            "icu*.dll", "Qt6DBus.dll", "*d.dll"
          )

          $totalRemoved = 0
          foreach ($dll in $unwantedDlls) {
            $matches = Get-ChildItem -Path "./install" -Filter $dll -Recurse -ErrorAction SilentlyContinue
            foreach ($match in $matches) {
              $sizeMB = [math]::Round($match.Length / 1MB, 2)
              $relativePath = $match.FullName.Replace((Resolve-Path "./install").Path, "").TrimStart('\')
              Remove-Item $match.FullName -Force
              Write-Host "Removed: $relativePath (${sizeMB}MB)"
              $totalRemoved += $match.Length
            }
          }

          # Remove entire unused plugin folders
          $unwantedFolders = @("sqldrivers", "multimedia", "qmltooling", "quick", "scenegraph", "styles")
          foreach ($folder in $unwantedFolders) {
            $path = "./install/$folder"
            if (Test-Path $path) {
              $folderSize = (Get-ChildItem $path -Recurse | Measure-Object -Property Length -Sum).Sum
              $folderSizeMB = [math]::Round($folderSize / 1MB, 2)
              Remove-Item $path -Recurse -Force
              Write-Host "Removed folder: $folder (${folderSizeMB}MB)"
              $totalRemoved += $folderSize
            }
          }

          Write-Host "Total space saved: $([math]::Round($totalRemoved / 1MB, 2))MB"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: windows-installer/*.exe
          if-no-files-found: error

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Read version
        id: ver
        run: echo "version=$(jq -r .version manifest.json)" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Download Sorter v${{ steps.ver.outputs.version }}
          tag_name: ${{ github.ref_name }}
          files: |
            linux-packages/*
            windows-installer/*
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
